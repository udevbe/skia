

/**************************************************************************************************
 *** This file was autogenerated from GrGrSLTypesAreSupported.fp; do not modify.
 **************************************************************************************************/
#include "GrGrSLTypesAreSupported.h"

#include "src/core/SkUtils.h"
#include "src/gpu/GrTexture.h"
#include "src/gpu/glsl/GrGLSLFragmentProcessor.h"
#include "src/gpu/glsl/GrGLSLFragmentShaderBuilder.h"
#include "src/gpu/glsl/GrGLSLProgramBuilder.h"
#include "src/sksl/SkSLCPP.h"
#include "src/sksl/SkSLUtil.h"
class GrGLSLGrSLTypesAreSupported : public GrGLSLFragmentProcessor {
public:
    GrGLSLGrSLTypesAreSupported() {}
    void emitCode(EmitArgs& args) override {
        GrGLSLFPFragmentBuilder* fragBuilder = args.fFragBuilder;
        const GrGrSLTypesAreSupported& _outer = args.fFp.cast<GrGrSLTypesAreSupported>();
        (void) _outer;
        SkString test_i_name;
        const GrShaderVar test_i_args[] = { GrShaderVar("a", kInt_GrSLType)};
        fragBuilder->emitFunction(kInt_GrSLType, "test_i", 1, test_i_args,
R"SkSL(for (; ; ) {
    return a;
}
)SkSL", &test_i_name);
        SkString test_i2_name;
        const GrShaderVar test_i2_args[] = { GrShaderVar("a", kInt2_GrSLType)};
        fragBuilder->emitFunction(kInt2_GrSLType, "test_i2", 1, test_i2_args,
R"SkSL(for (; ; ) {
    return a;
}
)SkSL", &test_i2_name);
        SkString test_i3_name;
        const GrShaderVar test_i3_args[] = { GrShaderVar("a", kInt3_GrSLType)};
        fragBuilder->emitFunction(kInt3_GrSLType, "test_i3", 1, test_i3_args,
R"SkSL(for (; ; ) {
    return a;
}
)SkSL", &test_i3_name);
        SkString test_i4_name;
        const GrShaderVar test_i4_args[] = { GrShaderVar("a", kInt4_GrSLType)};
        fragBuilder->emitFunction(kInt4_GrSLType, "test_i4", 1, test_i4_args,
R"SkSL(for (; ; ) {
    return a;
}
)SkSL", &test_i4_name);
        SkString test_h3x4_name;
        const GrShaderVar test_h3x4_args[] = { GrShaderVar("a", kHalf3x4_GrSLType)};
        fragBuilder->emitFunction(kHalf3x4_GrSLType, "test_h3x4", 1, test_h3x4_args,
R"SkSL(for (; ; ) {
    return a;
}
)SkSL", &test_h3x4_name);
        SkString test_f2x4_name;
        const GrShaderVar test_f2x4_args[] = { GrShaderVar("a", kFloat2x4_GrSLType)};
        fragBuilder->emitFunction(kFloat2x4_GrSLType, "test_f2x4", 1, test_f2x4_args,
R"SkSL(for (; ; ) {
    return a;
}
)SkSL", &test_f2x4_name);
        fragBuilder->codeAppendf(
R"SkSL(%s = half4(int4(%s(1)));
%s = half4(%s(int2(1)).xxxx);
%s = half4(%s(int3(1)).xxxx);
%s = half4(%s(int4(1)).xxxx);
%s = %s(half3x4(1.0))[0];
%s = half4(%s(float2x4(1.0))[0]);
)SkSL"
, args.fOutputColor, test_i_name.c_str(), args.fOutputColor, test_i2_name.c_str(), args.fOutputColor, test_i3_name.c_str(), args.fOutputColor, test_i4_name.c_str(), args.fOutputColor, test_h3x4_name.c_str(), args.fOutputColor, test_f2x4_name.c_str());
    }
private:
    void onSetData(const GrGLSLProgramDataManager& pdman, const GrFragmentProcessor& _proc) override {
    }
};
GrGLSLFragmentProcessor* GrGrSLTypesAreSupported::onCreateGLSLInstance() const {
    return new GrGLSLGrSLTypesAreSupported();
}
void GrGrSLTypesAreSupported::onGetGLSLProcessorKey(const GrShaderCaps& caps, GrProcessorKeyBuilder* b) const {
}
bool GrGrSLTypesAreSupported::onIsEqual(const GrFragmentProcessor& other) const {
    const GrGrSLTypesAreSupported& that = other.cast<GrGrSLTypesAreSupported>();
    (void) that;
    return true;
}
bool GrGrSLTypesAreSupported::usesExplicitReturn() const {
    return false;
}
GrGrSLTypesAreSupported::GrGrSLTypesAreSupported(const GrGrSLTypesAreSupported& src)
: INHERITED(kGrGrSLTypesAreSupported_ClassID, src.optimizationFlags()) {
        this->cloneAndRegisterAllChildProcessors(src);
}
std::unique_ptr<GrFragmentProcessor> GrGrSLTypesAreSupported::clone() const {
    return std::make_unique<GrGrSLTypesAreSupported>(*this);
}
#if GR_TEST_UTILS
SkString GrGrSLTypesAreSupported::onDumpInfo() const {
    return SkString();
}
#endif
